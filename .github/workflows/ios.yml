name: iOS CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Cache Xcode derived data
      uses: actions/cache@v3
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
          
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ~/.cocoapods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-
          
    - name: Install dependencies
      run: |
        if [ -f Podfile ]; then
          pod install
        fi
        
    - name: List available schemes
      run: |
        xcodebuild -list -project Plantdoc-app.xcodeproj
        
    - name: Show available destinations
      run: |
        xcodebuild -showdestinations -project Plantdoc-app.xcodeproj -scheme Plantdoc-app
        
    - name: Build for iOS Simulator
      run: |
        # Try specific simulator first, then fallback to generic
        if xcodebuild -showdestinations -project Plantdoc-app.xcodeproj -scheme Plantdoc-app | grep -q "iPhone 15"; then
          DESTINATION='platform=iOS Simulator,name=iPhone 15,OS=latest'
        elif xcodebuild -showdestinations -project Plantdoc-app.xcodeproj -scheme Plantdoc-app | grep -q "iPhone 14"; then
          DESTINATION='platform=iOS Simulator,name=iPhone 14,OS=latest'
        else
          DESTINATION='platform=iOS Simulator,name=Any iOS Simulator Device'
        fi
        
        echo "Using destination: $DESTINATION"
        
        xcodebuild clean build \
          -project Plantdoc-app.xcodeproj \
          -scheme Plantdoc-app \
          -destination "$DESTINATION" \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          GCC_WARN_INHIBIT_ALL_WARNINGS=NO \
          SWIFT_VERSION=5.0 \
          -allowProvisioningUpdates
          
    - name: Run tests
      run: |
        # Try specific simulator first, then fallback to generic
        if xcodebuild -showdestinations -project Plantdoc-app.xcodeproj -scheme Plantdoc-app | grep -q "iPhone 15"; then
          DESTINATION='platform=iOS Simulator,name=iPhone 15,OS=latest'
        elif xcodebuild -showdestinations -project Plantdoc-app.xcodeproj -scheme Plantdoc-app | grep -q "iPhone 14"; then
          DESTINATION='platform=iOS Simulator,name=iPhone 14,OS=latest'
        else
          DESTINATION='platform=iOS Simulator,name=Any iOS Simulator Device'
        fi
        
        echo "Using destination: $DESTINATION"
        
        xcodebuild test \
          -project Plantdoc-app.xcodeproj \
          -scheme Plantdoc-app \
          -destination "$DESTINATION" \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          GCC_WARN_INHIBIT_ALL_WARNINGS=NO \
          SWIFT_VERSION=5.0 \
          -allowProvisioningUpdates
          
    - name: Build for device (Release)
      run: |
        xcodebuild clean build \
          -project Plantdoc-app.xcodeproj \
          -scheme Plantdoc-app \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -derivedDataPath ~/Library/Developer/Xcode/DerivedData \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          GCC_WARN_INHIBIT_ALL_WARNINGS=NO \
          SWIFT_VERSION=5.0 \
          -allowProvisioningUpdates
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: iOS-App
        path: ~/Library/Developer/Xcode/DerivedData/Plantdoc-app-*/Build/Products/Release-iphoneos/Plantdoc-app.app

  code-quality:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
        
    - name: Install SwiftLint
      run: |
        brew install swiftlint
        
    - name: SwiftLint
      run: |
        swiftlint lint Plantdoc-app/ --reporter github-actions-logging || true
        
    - name: Check for TODO comments
      run: |
        if grep -r "TODO\|FIXME\|HACK" Plantdoc-app/ --include="*.swift"; then
          echo "Found TODO/FIXME/HACK comments in code"
          exit 1
        fi
        
    - name: Check file size
      run: |
        # Check if any Swift file is larger than 1000 lines
        for file in $(find Plantdoc-app/ -name "*.swift"); do
          lines=$(wc -l < "$file")
          if [ $lines -gt 1000 ]; then
            echo "Warning: $file has $lines lines (consider splitting)"
          fi
        done

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" Plantdoc-app/ --include="*.swift" --include="*.plist" | grep -v "//"; then
          echo "Warning: Potential hardcoded secrets found"
        fi
        
        # Check for insecure network calls
        if grep -r "http://" Plantdoc-app/ --include="*.swift"; then
          echo "Warning: Insecure HTTP calls found"
        fi 